Our record indicates that your Trust Center Server ID (TCID) certificate for monitor.eps.siemens.com will expire on Oct 30, 2017 9:20:59 AM. 

id,
completed,
worker,
team,
has_to_be_replaced_before,
expiration_date,

ticket_number,
certificate,
server_name,
web_type,
type,
mail_to_co,
csr,
answer_co,
order_certificate,
delivery_from_siemens,
p12_and_zip,
moved_to_server,
implemented,
deleted_gm4web,
evidence_in_ticket,
notes

[{'order_certificate': u'None', 
'answer_co': u'None', 
'certificates_id': 1, 
'server_name': u'None', 
'evidence_in_ticket': u'None', 
'expiration_date': u'2017-10-30', 
'notes': u'Changed notes', 
'mail_to_co': u'None', 
'moved_to_server': u'None', 
'has_to_be_replaced_before': u'2017-10-25', 
'p12_and_zip': u'None', 
'delivery_from_siemens': u'None', 
'web_type': u'None', 
'team': u'CAP', 
'worker': u'Piotr Karys', 
'ticket_number': u'None', 
'deleted_gm4web': u'None', 
'implemented': u'None', 
'csr': u'2017-10-31'}]]

''' if dict['completed'] == '' or dict['completed'] == 'None':
        dict['completed'] = None
    if dict['worker'] == '' or dict['worker'] == 'None':
        dict['worker'] = None
    if dict['team'] == '' or dict['team'] == 'None':
        dict['team'] = None
    if dict['has_to_be_replaced_before'] == '' or dict['has_to_be_replaced_before'] == 'None':
        dict['has_to_be_replaced_before'] = None
    if dict['expiration_date'] == '' or dict['expiration_date'] == 'None':
        dict['expiration_date'] = None
    if dict['ticket_number'] == '' or dict['ticket_number'] == 'None':
        dict['ticket_number'] = None
    if dict['cn'] == '' or dict['cn'] == 'None':
        dict['cn'] = None
    if dict['server_name'] == '' or dict['server_name'] == 'None':
        dict['server_name'] = None
    if dict['web_type'] == '' or dict['web_type'] == 'None':
        dict['web_type'] = None
    if dict['type'] == '' or dict['type'] == 'None':
        dict['type'] = None
    if dict['mail_to_co'] == '' or dict['mail_to_co'] == 'None':
        dict['mail_to_co'] = None
    if dict['csr'] == '' or dict['csr'] == 'None':
        dict['csr'] = None
    if dict['answer_co'] == '' or dict['answer_co'] == 'None':
        dict['answer_co'] = None
    if dict['order_certificate'] == '' or dict['order_certificate'] == 'None':
        dict['order_certificate'] = None
    if dict['delivery_from_siemens'] == '' or dict['delivery_from_siemens'] == 'None':
        dict['delivery_from_siemens'] = None
    if dict['p12_and_zip'] == '' or dict['p12_and_zip'] == 'None':
        dict['p12_and_zip'] = None
    if dict['moved_to_server'] == '' or dict['moved_to_server'] == 'None':
        dict['moved_to_server'] = None
    if dict['implemented'] == '' or dict['implemented'] == 'None':
        dict['implemented'] = None
    if dict['deleted_gm4web'] == '' or dict['deleted_gm4web'] == 'None':
        dict['deleted_gm4web'] = None
    if dict['evidence_in_ticket'] == '' or dict['evidence_in_ticket'] == 'None':
        dict['evidence_in_ticket'] = None
    if dict['notes'] == '' or dict['notes'] == 'None':
        dict['notes'] = None '''

        ''' if has_to_be_replaced_before != '' and has_to_be_replaced_before != None and has_to_be_replaced_before != 'None':
            has_to_be_replaced_before = has_to_be_replaced_before.split('-')
            has_to_be_replaced_before = datetime.date(int(has_to_be_replaced_before[0]),int(has_to_be_replaced_before[1]),int(has_to_be_replaced_before[2]))
        else:
            has_to_be_replaced_before = None

        if expiration_date != '' and expiration_date != None and expiration_date != 'None':
            expiration_date = expiration_date.split('-') 
            expiration_date = datetime.date(int(expiration_date[0]),int(expiration_date[1]),int(expiration_date[2]))
        else:
            expiration_date = None

        if mail_to_co != '' and mail_to_co != None and mail_to_co != 'None':
            mail_to_co = mail_to_co.split('-')
            mail_to_co =  datetime.date(int(mail_to_co[0]),int(mail_to_co[1]),int(mail_to_co[2]))
        else:
            mail_to_co = None
            
        if csr != '' and csr != None and csr != 'None':
            csr = csr.split('-')
            csr = datetime.date(int(csr[0]),int(csr[1]),int(csr[2]))
        else:
            csr = None

        if answer_co != '' and answer_co != None and answer_co != 'None':
            answer_co = answer_co.split('-')
            answer_co = datetime.date(int(answer_co[0]),int(answer_co[1]),int(answer_co[2]))
        else:
            answer_co = None

        if order_certificate != '' and order_certificate != None and order_certificate != 'None':
            order_certificate = order_certificate.split('-')
            order_certificate = datetime.date(int(order_certificate[0]),int(order_certificate[1]),int(order_certificate[2]))
        else:
            order_certificate = None

        if delivery_from_siemens != '' and delivery_from_siemens != None and delivery_from_siemens != 'None':
            delivery_from_siemens = delivery_from_siemens.split('-')
            delivery_from_siemens =  datetime.date(int(delivery_from_siemens[0]),int(delivery_from_siemens[1]),int(delivery_from_siemens[2]))
        else:
            delivery_from_siemens = None

        if p12_and_zip != '' and p12_and_zip != None and p12_and_zip != 'None':
            p12_and_zip = p12_and_zip.split('-')
            p12_and_zip =  datetime.date(int(p12_and_zip[0]),int(p12_and_zip[1]),int(p12_and_zip[2]))
        else:
            p12_and_zip = None

        if moved_to_server != '' and moved_to_server != None and moved_to_server != 'None':
            moved_to_server = moved_to_server.split('-')
            moved_to_server =  datetime.date(int(moved_to_server[0]),int(moved_to_server[1]),int(moved_to_server[2]))
        else:
            moved_to_server = None

        if implemented != '' and implemented != None and implemented != 'None':
            implemented = implemented.split('-')
            implemented =  datetime.date(int(implemented[0]),int(implemented[1]),int(implemented[2]))
        else:
            implemented = None

        if deleted_gm4web != '' and deleted_gm4web != None and deleted_gm4web != 'None':
            deleted_gm4web = deleted_gm4web.split('-')
            deleted_gm4web =  datetime.date(int(deleted_gm4web[0]),int(deleted_gm4web[1]),int(deleted_gm4web[2]))
        else:
            deleted_gm4web = None

        if evidence_in_ticket != '' and evidence_in_ticket != None and evidence_in_ticket != 'None':
            evidence_in_ticket = evidence_in_ticket.split('-')
            evidence_in_ticket =  datetime.date(int(evidence_in_ticket[0]),int(evidence_in_ticket[1]),int(evidence_in_ticket[2]))
        else:
            evidence_in_ticket = None  '''

   print (certificate.has_to_be_replaced_before)
    print (certificate.mail_to_co)
    print (certificate.completed)
    print (certificate.worker)
    print (certificate.team)
    print (certificate.has_to_be_replaced_before)
    print (certificate.expiration_date)
    print (certificate.ticket_number)
    print (certificate.certificate)
    print (certificate.server_name)
    print (certificate.web_type)
    print (certificate.type)
    print (certificate.mail_to_co)
    print (certificate.csr)
    print (certificate.answer_co)
    print (certificate.order_certificate)
    print (certificate.delivery_from_siemens)
    print (certificate.p12_and_zip) 
    print (certificate.moved_to_server)
    print (certificate.implemented)
    print (certificate.deleted_gm4web)
    print (certificate.evidence_in_ticket)
    print (certificate.notes)

@app.route('/api/worker/<string:worker>', methods=['GET'])
def get_task_by_worker(worker):
    return jsonify(query_like_db('worker', worker))

@app.route('/api/cert/<int:id>', methods=['GET'])
def get_task_by_id(id):
    return jsonify(query_db('id', id))

@app.route('/api/completed/yes', methods=['GET'])
def all_completed():
    return jsonify(query_db('completed', 'yes'))

@app.route('/api/completed/no', methods=['GET'])
def all_not_completed():
    return jsonify(query_like_db('completed', 'no'))

@app.route('/api/team/<string:team>', methods=['GET'])
def get_cert_by_team(team):
    return jsonify(query_like_db('team', team))

@app.route('/api/cn/<string:cn>', methods=['GET'])
def get_cert_by_cn(cn):
    return jsonify(query_like_db('certificate', cn))

@app.route('/api/cn/<string:cn>/full', methods=['GET'])
def get_cert_by_cn_full(cn):
    return jsonify(query_db('certificate', cn))

def query_like_db(field, data):
    field = field.lower()
    if type(data) == str:
        data = data.lower()
    con = sqlite3.connect("certificates.db")
    con.row_factory = sqlite3.Row
    result = []
    cur = con.cursor()
    sql = '''select * from certificates where '''+field+''' like "%{wk}%"'''.format(wk=data)
    cur.execute(sql)
    rows = cur.fetchall()
    for row in rows:
        result.append([x for x in row])
    return result

def query_db(field, data):
    field = field.lower()
    if type(data) == str:
        data = data.lower()
    con = sqlite3.connect("certificates.db")
    con.row_factory = sqlite3.Row
    result = []
    cur = con.cursor()
    cur.execute('''select * from certificates where '''+str(field)+''' = "{d}"'''.format(d=data))
    rows = cur.fetchall()
    for row in rows:
        result.append([x for x in row])
    return result

def query_db_all():
    con = sqlite3.connect("certificates.db")
    con.row_factory = sqlite3.Row
    result = []
    cur = con.cursor()
    cur.execute('''select * from certificates''')
    rows = cur.fetchall()
    for row in rows:
        result.append([x for x in row])
    return result


    if has_to_be_replaced_before != '' and has_to_be_replaced_before != None and has_to_be_replaced_before != 'None':
            has_to_be_replaced_before = has_to_be_replaced_before.split('-')
            has_to_be_replaced_before = datetime.date(int(has_to_be_replaced_before[0]),int(has_to_be_replaced_before[1]),int(has_to_be_replaced_before[2]))
        else:
            has_to_be_replaced_before = None

        if expiration_date != '' and expiration_date != None and expiration_date != 'None':
            expiration_date = expiration_date.split('-') 
            expiration_date = datetime.date(int(expiration_date[0]),int(expiration_date[1]),int(expiration_date[2]))
        else:
            expiration_date = None

        if mail_to_co != '' and mail_to_co != None and mail_to_co != 'None':
            mail_to_co = mail_to_co.split('-')
            mail_to_co =  datetime.date(int(mail_to_co[0]),int(mail_to_co[1]),int(mail_to_co[2]))
        else:
            mail_to_co = None
            
        if csr != '' and csr != None and csr != 'None':
            csr = csr.split('-')
            csr = datetime.date(int(csr[0]),int(csr[1]),int(csr[2]))
        else:
            csr = None

        if answer_co != '' and answer_co != None and answer_co != 'None':
            answer_co = answer_co.split('-')
            answer_co = datetime.date(int(answer_co[0]),int(answer_co[1]),int(answer_co[2]))
        else:
            answer_co = None

        if order_certificate != '' and order_certificate != None and order_certificate != 'None':
            order_certificate = order_certificate.split('-')
            order_certificate = datetime.date(int(order_certificate[0]),int(order_certificate[1]),int(order_certificate[2]))
        else:
            order_certificate = None

        if delivery_from_siemens != '' and delivery_from_siemens != None and delivery_from_siemens != 'None':
            delivery_from_siemens = delivery_from_siemens.split('-')
            delivery_from_siemens =  datetime.date(int(delivery_from_siemens[0]),int(delivery_from_siemens[1]),int(delivery_from_siemens[2]))
        else:
            delivery_from_siemens = None

        if p12_and_zip != '' and p12_and_zip != None and p12_and_zip != 'None':
            p12_and_zip = p12_and_zip.split('-')
            p12_and_zip =  datetime.date(int(p12_and_zip[0]),int(p12_and_zip[1]),int(p12_and_zip[2]))
        else:
            p12_and_zip = None

        if moved_to_server != '' and moved_to_server != None and moved_to_server != 'None':
            moved_to_server = moved_to_server.split('-')
            moved_to_server =  datetime.date(int(moved_to_server[0]),int(moved_to_server[1]),int(moved_to_server[2]))
        else:
            moved_to_server = None

        if implemented != '' and implemented != None and implemented != 'None':
            implemented = implemented.split('-')
            implemented =  datetime.date(int(implemented[0]),int(implemented[1]),int(implemented[2]))
        else:
            implemented = None

        if deleted_gm4web != '' and deleted_gm4web != None and deleted_gm4web != 'None':
            deleted_gm4web = deleted_gm4web.split('-')
            deleted_gm4web =  datetime.date(int(deleted_gm4web[0]),int(deleted_gm4web[1]),int(deleted_gm4web[2]))
        else:
            deleted_gm4web = None

        if evidence_in_ticket != '' and evidence_in_ticket != None and evidence_in_ticket != 'None':
            evidence_in_ticket = evidence_in_ticket.split('-')
            evidence_in_ticket =  datetime.date(int(evidence_in_ticket[0]),int(evidence_in_ticket[1]),int(evidence_in_ticket[2]))
        else:
            evidence_in_ticket = None


Add package metadata to application
Test and build consistency
Add a builder service
Build and publish a Python wheels

146.254.160.65